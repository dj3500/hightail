package org.hightail.ui;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.IOException;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import org.hightail.Config;
import org.hightail.KeyboardShortcuts;

public class EditShortcutJDialog extends javax.swing.JDialog {

    private KeyboardShortcuts shortcut;
    
    /**
     * Creates new form EditShortcutJDialog
     */
    public EditShortcutJDialog(java.awt.Frame parent, KeyboardShortcuts shortcut) {
        super(parent, true); // makes it modal
        initComponents();
        
        setLocationRelativeTo(parent);
        
        makeShortcuts();
        
        this.shortcut = shortcut;
        
        shortcutNameLabel.setText(shortcut.getAction());
        KeyStroke keyStroke = shortcut.getKeyStroke();
        int modifiers = keyStroke.getModifiers();
        int keyCode = keyStroke.getKeyCode();
        setFields(keyCode, modifiers);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controlCheckBox = new javax.swing.JCheckBox();
        altCheckBox = new javax.swing.JCheckBox();
        shiftCheckBox = new javax.swing.JCheckBox();
        keyComboBox = new javax.swing.JComboBox();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        shortcutNameLabel = new javax.swing.JLabel();
        restoreDefaultButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edit shortcut");

        controlCheckBox.setText("Control");

        altCheckBox.setText("Alt");

        shiftCheckBox.setText("Shift");

        keyComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "ENTER" }));

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        restoreDefaultButton.setText("Restore default");
        restoreDefaultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restoreDefaultButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(shortcutNameLabel)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(restoreDefaultButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cancelButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(saveButton))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(controlCheckBox)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(altCheckBox)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(shiftCheckBox)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(keyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(shortcutNameLabel)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(controlCheckBox)
                    .addComponent(altCheckBox)
                    .addComponent(shiftCheckBox)
                    .addComponent(keyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(cancelButton)
                    .addComponent(restoreDefaultButton))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        confirmAndClose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void save() {
        KeyStroke newShortcut = getNewShortcut();
        // no change was made
        if (!shortcut.getKeyStroke().equals(newShortcut)) {
            Config.set("shortcut " + shortcut.getAction(), newShortcut.toString().replace(" pressed ", " "));
            try {
                Config.save();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Failed to save changes.", "Fail", JOptionPane.ERROR_MESSAGE);
            }
        }
        this.dispose();
    }
    
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        save();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void restoreDefaultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restoreDefaultButtonActionPerformed
        KeyStroke keyStroke = KeyStroke.getKeyStroke(shortcut.getDefaultCode());
        int modifiers = keyStroke.getModifiers();
        int keyCode = keyStroke.getKeyCode();
        setFields(keyCode, modifiers);
    }//GEN-LAST:event_restoreDefaultButtonActionPerformed

    private void setFields(int keyCode, int modifiers) {
        controlCheckBox.setSelected((modifiers & KeyEvent.CTRL_DOWN_MASK) != 0);
        altCheckBox.setSelected((modifiers & KeyEvent.ALT_DOWN_MASK) != 0);
        shiftCheckBox.setSelected((modifiers & KeyEvent.SHIFT_DOWN_MASK) != 0);
        for (int i = 0; i < keyComboBox.getItemCount(); i++) {
            if (keyCode == KeyStroke.getKeyStroke((String) keyComboBox.getItemAt(i)).getKeyCode()) {
                keyComboBox.setSelectedIndex(i);
                break;
            }
        }
    }
    
    private KeyStroke getNewShortcut() {
        int modifiers = 0;
        if (controlCheckBox.isSelected()) {
            modifiers |= KeyEvent.CTRL_DOWN_MASK;
        }
        if (altCheckBox.isSelected()) {
            modifiers |= KeyEvent.ALT_DOWN_MASK;
        }
        if (shiftCheckBox.isSelected()) {
            modifiers |= KeyEvent.SHIFT_DOWN_MASK;
        }
        int keyCode = KeyStroke.getKeyStroke((String) keyComboBox.getSelectedItem()).getKeyCode();
        return KeyStroke.getKeyStroke(keyCode, modifiers);
    }
    
    private void confirmAndClose () {
        // ask for confirmation only if there is something unsaved
        if (!shortcut.getKeyStroke().equals(getNewShortcut())) {
            // Display confirm dialog
            int confirmed = JOptionPane.showConfirmDialog(this,
                    "Are you sure? There's unsaved changes.",
                    "Confirm close",
                    JOptionPane.YES_NO_OPTION);
            
            // Close iff user confirmed
            if (confirmed == JOptionPane.YES_OPTION) {
                this.dispose();
            }
        }
        else {
            this.dispose();
        }
    }
    
    private void makeShortcuts() {
        // escape key will close the dialog
        getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), "close");
        getRootPane().getActionMap().put("close", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                confirmAndClose();
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox altCheckBox;
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox controlCheckBox;
    private javax.swing.JComboBox keyComboBox;
    private javax.swing.JButton restoreDefaultButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JCheckBox shiftCheckBox;
    private javax.swing.JLabel shortcutNameLabel;
    // End of variables declaration//GEN-END:variables
}
