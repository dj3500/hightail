package org.hightail.ui;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import org.hightail.Problem;
import org.hightail.TestcaseSet;
import org.hightail.parsers.contest.ContestParser;
import org.hightail.parsers.task.TaskParser;
import org.hightail.util.StringPair;
import org.htmlparser.util.ParserException;


public class NewContestJDialog extends javax.swing.JDialog {
    
    protected ArrayList<Problem> problemList = new ArrayList<>();
    protected Thread thread;
    
    /**
     * Creates new form NewContestJDialog
     */
    public NewContestJDialog(java.awt.Frame parent) {
        super(parent,true); // makes it modal
        initComponents();
        
        setTitle("New contest");
        // escape key will close the dialog
        getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), "close");
        getRootPane().getActionMap().put("close", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cancel();
            }
        });
        
        // sets cursor in problem name field
        contestUrlField.requestFocus();
        // hitting enter will perform the same action as clicking parse contest button
        contestUrlField.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "enter");
        contestUrlField.getActionMap().put("enter", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                parseContest();
            }
        });
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contestUrlLabel = new javax.swing.JLabel();
        parseContestButton = new javax.swing.JButton();
        contestUrlField = new javax.swing.JTextField();
        contestParseStatusLabel = new javax.swing.JLabel();
        abortParsingButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        parsingStatusLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        contestUrlLabel.setText("Contest URL:");

        parseContestButton.setText("Parse contest");
        parseContestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parseContestButtonActionPerformed(evt);
            }
        });

        abortParsingButton.setText("Abort");
        abortParsingButton.setEnabled(false);
        abortParsingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abortParsingButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(contestParseStatusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(parsingStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(abortParsingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(parseContestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(contestUrlLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(contestUrlField)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contestUrlLabel)
                    .addComponent(contestUrlField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(parseContestButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(contestParseStatusLabel)
                        .addComponent(abortParsingButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(parsingStatusLabel)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void parseContest() {
        String URL = contestUrlField.getText();
        if (URL.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Enter the URL.", "No URL", JOptionPane.ERROR_MESSAGE);
            return;
        }
        problemList.clear();
        parseContestButton.setEnabled(false);
        abortParsingButton.setEnabled(true);
        // TODO: what about the cancel button?
        startParsing(URL);
    }
    
    private void parseContestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parseContestButtonActionPerformed
        parseContest();
    }//GEN-LAST:event_parseContestButtonActionPerformed
    
    private void abortParsingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abortParsingButtonActionPerformed
        abortParsing();
    }//GEN-LAST:event_abortParsingButtonActionPerformed
    
    private void cancel() {
        problemList.clear();
        this.dispose();
    }
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        cancel();
    }//GEN-LAST:event_cancelButtonActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abortParsingButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel contestParseStatusLabel;
    private javax.swing.JTextField contestUrlField;
    private javax.swing.JLabel contestUrlLabel;
    private javax.swing.JButton parseContestButton;
    private javax.swing.JLabel parsingStatusLabel;
    // End of variables declaration//GEN-END:variables
    
    ArrayList<Problem> getProblemList() {
        return problemList;
    }
    
    private void startParsing(final String URL) {
        thread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    parsingStatusLabel.setText("Parsing...");
                    ContestParser contestParser = ContestParser.getContestParser(URL);
                    TaskParser taskParser = TaskParser.getTaskParser(URL);
                    List<StringPair> tasks = contestParser.parse(URL);
                    if(tasks.isEmpty()) {
                        throw new ParserException();
                    }
                    for (StringPair pair : tasks) {
                        String name = pair.getSecond(), taskUrl = pair.getFirst();
                        TestcaseSet testcaseSet = taskParser.parse(taskUrl);
                        problemList.add(new Problem(name,testcaseSet));
                    }
                    abortParsingButton.setEnabled(false); // to avoid interruption during dispose
                    dispose(); // TODO: is this okay?
                } catch (ParserException ex) {
                    // TODO: report errors to user
                    abortParsingButton.setEnabled(false);
                    parseContestButton.setEnabled(true);
                    parsingStatusLabel.setText("Parsing failed");
                    problemList.clear();
                }
            }
        });
        thread.start();
    }
    
    private void abortParsing() {
        thread.interrupt();
        problemList.clear();
        abortParsingButton.setEnabled(false);
        parseContestButton.setEnabled(true);
    }
}
