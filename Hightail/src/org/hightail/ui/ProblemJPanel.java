/*
 * ProblemJPanel.java
 *
 * Created on 2011-02-17, 23:13:02
 */

package org.hightail.ui;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.hightail.Problem;
import org.hightail.Testcase;
import org.hightail.util.TestingListener;

public class ProblemJPanel extends javax.swing.JPanel implements TestingListener {

    protected Problem problem;
    protected JTabbedPane parentTabbedPane; // used for deletion of tab (in the future)
    protected JFrame parentWindow; // used as parent for modal dialogs
    private TestTableModel testTableModel; // used to notify testTable about the testcaseSet changes

    /** Creates new form ProblemJPanel */
    public ProblemJPanel(Problem problem, JTabbedPane tabbedPane, JFrame parentWindow) {
        this.problem = problem;
        this.testTableModel = new TestTableModel(problem.getTestcaseSet());
        this.parentTabbedPane = tabbedPane;
        this.parentWindow = parentWindow;

        initComponents();

        ListSelectionListener listSelectionListener = new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                 boolean enable = !(testTable.getSelectionModel().isSelectionEmpty());
                 editTestcaseButton.setEnabled(enable);
                 deleteTestcaseButton.setEnabled(enable);
            }
        };
        testTable.getSelectionModel().addListSelectionListener(listSelectionListener);
        
        sourceFile.setText(problem.getDefaultExecutableFilename());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressPanel = new javax.swing.JPanel();
        testcasePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        testTable = new javax.swing.JTable();
        testTable.setDefaultRenderer(String.class, new MultilineTableCellRenderer());
        newTestcaseButton = new javax.swing.JButton();
        editTestcaseButton = new javax.swing.JButton();
        deleteTestcaseButton = new javax.swing.JButton();
        runTestsButton = new javax.swing.JButton();
        abortTestsButton = new javax.swing.JButton();
        openContainingDirectoryButton = new javax.swing.JButton();
        executableFileLabel = new javax.swing.JLabel();
        sourceFile = new javax.swing.JTextField();

        progressPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Progress and results"));

        javax.swing.GroupLayout progressPanelLayout = new javax.swing.GroupLayout(progressPanel);
        progressPanel.setLayout(progressPanelLayout);
        progressPanelLayout.setHorizontalGroup(
            progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 730, Short.MAX_VALUE)
        );
        progressPanelLayout.setVerticalGroup(
            progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 56, Short.MAX_VALUE)
        );

        testcasePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Test cases"));

        testTable.setModel(testTableModel);
        testTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                testTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(testTable);

        newTestcaseButton.setText("New test case");
        newTestcaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTestcaseButtonActionPerformed(evt);
            }
        });

        editTestcaseButton.setText("Inspect / Edit");
        editTestcaseButton.setEnabled(false);
        editTestcaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTestcaseButtonActionPerformed(evt);
            }
        });

        deleteTestcaseButton.setText("Delete test case");
        deleteTestcaseButton.setEnabled(false);
        deleteTestcaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTestcaseButtonActionPerformed(evt);
            }
        });

        runTestsButton.setText("Run tests");
        runTestsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runTestsButtonActionPerformed(evt);
            }
        });

        abortTestsButton.setText("Abort tests");
        abortTestsButton.setEnabled(false);
        abortTestsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abortTestsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout testcasePanelLayout = new javax.swing.GroupLayout(testcasePanel);
        testcasePanel.setLayout(testcasePanelLayout);
        testcasePanelLayout.setHorizontalGroup(
            testcasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testcasePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newTestcaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(editTestcaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deleteTestcaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(runTestsButton)
                .addGap(18, 18, 18)
                .addComponent(abortTestsButton)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
        );
        testcasePanelLayout.setVerticalGroup(
            testcasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, testcasePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(testcasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newTestcaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editTestcaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteTestcaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(runTestsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(abortTestsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        openContainingDirectoryButton.setText("Open containing directory");
        openContainingDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openContainingDirectoryButtonActionPerformed(evt);
            }
        });

        executableFileLabel.setText("Path to executable file:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(testcasePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(executableFileLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sourceFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(openContainingDirectoryButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(executableFileLabel)
                    .addComponent(sourceFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openContainingDirectoryButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(testcasePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void newTestcaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTestcaseButtonActionPerformed
        Testcase newTestcase = new Testcase();
        TestcaseJDialog dialog = new TestcaseJDialog(parentWindow, newTestcase, true);
        dialog.setVisible(true); // this is modal; it will block until window is closed
        if (dialog.getReturnValue()) {
            // we need to add the newTestcase
            problem.addTestcase(newTestcase);
            testTableModel.rowInserted();
        }
    }//GEN-LAST:event_newTestcaseButtonActionPerformed

    private void editTestcaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTestcaseButtonActionPerformed
        editCurrentTestcase();
    }//GEN-LAST:event_editTestcaseButtonActionPerformed

    private void editCurrentTestcase() {
        int selectedRow = testTable.getSelectedRow();
        if (selectedRow == -1) throw new UnsupportedOperationException("Implementation error: edit button clicked, but no row selected");
        Testcase editedTestcase = problem.getTestcase(selectedRow);
        TestcaseJDialog dialog = new TestcaseJDialog(parentWindow, editedTestcase, false);
        dialog.setVisible(true); // this is modal; it will block until window is closed
        if (dialog.getReturnValue()) {
            // the test case was edited
            testTableModel.rowUpdated(selectedRow);
        }
    }
    
    private void deleteTestcaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTestcaseButtonActionPerformed
        int selectedRow = testTable.getSelectedRow();
        if (selectedRow == -1) throw new UnsupportedOperationException("Implementation error: delete button clicked, but no row selected");
        // display confirm dialog
        int confirmed = JOptionPane.showConfirmDialog(this, "Are you sure?", "Confirm delete", JOptionPane.YES_NO_OPTION);

        if (confirmed == JOptionPane.YES_OPTION) {
            // we need to delete
            problem.deleteTestcase(selectedRow);
            testTableModel.rowDeleted(selectedRow);
        }
    }//GEN-LAST:event_deleteTestcaseButtonActionPerformed

    private boolean stateOfEditAndDeleteTestcaseButtonsBefore = false;
    private void setEnabledOnInvasiveButtons(boolean state) {
        runTestsButton.setEnabled(state);
        if (!state) {
            stateOfEditAndDeleteTestcaseButtonsBefore = editTestcaseButton.isEnabled();
            editTestcaseButton.setEnabled(false);
            deleteTestcaseButton.setEnabled(false);
        } else {
            editTestcaseButton.setEnabled(stateOfEditAndDeleteTestcaseButtonsBefore);
            deleteTestcaseButton.setEnabled(stateOfEditAndDeleteTestcaseButtonsBefore);
        }
    }
    
    private void runTestsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runTestsButtonActionPerformed
        String pathToExecFile = sourceFile.getText();
        File execFile = new File(pathToExecFile);
        if(!execFile.exists()) {
            // executable file does not exist
            JOptionPane.showMessageDialog(this, "Selected file does not exist.", "Wrong file", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(execFile.isDirectory()) {
            // file path points to a directory, not a file
            JOptionPane.showMessageDialog(this, "Selected path is a directory.", "Wrong file", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(!execFile.canExecute()) {
            // application cannot execute this file
            JOptionPane.showMessageDialog(this, "Selected file cannot be executed.", "Wrong file", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (problem.getTestcaseSet().isEmpty()) {
            // no tests
            JOptionPane.showMessageDialog(this, "No tests to run.", "No tests", JOptionPane.ERROR_MESSAGE);
            return;
        }
        setEnabledOnInvasiveButtons(false);
        problem.emptyResultsOfAllTestcases();
        testTableModel.fireTableDataChanged();
        testTableModel.setTemporaryIndexesForTestcases();
        problem.runTests(this, pathToExecFile);
        abortTestsButton.setEnabled(true);
        // now tests are running, they will call notifyResultsOfSingleTestcase and notifyEndOfTesting
    }//GEN-LAST:event_runTestsButtonActionPerformed

    private void abortTestsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abortTestsButtonActionPerformed
        abortTestsButton.setEnabled(false);
        problem.abortTests();
        setEnabledOnInvasiveButtons(true);
    }//GEN-LAST:event_abortTestsButtonActionPerformed

    private void openContainingDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openContainingDirectoryButtonActionPerformed
        File currentDirectory = new File(sourceFile.getText());
        if(!currentDirectory.isDirectory()) {
            currentDirectory = currentDirectory.getParentFile();
        }
        // the dialog will open the current selected directory if it's correct or home directory otherwise
        JFileChooser fc = new JFileChooser(currentDirectory);
        int returnVal = fc.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            String filePath = fc.getSelectedFile().getAbsolutePath();
            sourceFile.setText(filePath);
        }
    }//GEN-LAST:event_openContainingDirectoryButtonActionPerformed

    private void testTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_testTableMouseClicked
        if (evt.getClickCount() == 2) { // double-click
            editCurrentTestcase();
        }
    }//GEN-LAST:event_testTableMouseClicked

    // TODO: add a Browse... button for the executable file
    
    @Override
    public void notifyResultsOfSingleTestcase (int index) {
        // Testcase object is already updated by now
        testTableModel.fireTableRowsUpdated(index, index);
    }
    
    @Override
    public void notifyEndOfTesting () {
        abortTestsButton.setEnabled(false);
        // TODO: report the main result of testing (all OK => OK, etc.)
        setEnabledOnInvasiveButtons(true);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abortTestsButton;
    private javax.swing.JButton deleteTestcaseButton;
    private javax.swing.JButton editTestcaseButton;
    private javax.swing.JLabel executableFileLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newTestcaseButton;
    private javax.swing.JButton openContainingDirectoryButton;
    private javax.swing.JPanel progressPanel;
    private javax.swing.JButton runTestsButton;
    private javax.swing.JTextField sourceFile;
    private javax.swing.JTable testTable;
    private javax.swing.JPanel testcasePanel;
    // End of variables declaration//GEN-END:variables

}
